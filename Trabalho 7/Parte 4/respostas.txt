1) É possível adicionar uma função membro na classe Derived que chama a função read()?

Sim, pode ser acessada, um elemento protect pode ser acessado por uma class children.

/********************************************************************************************************/

2) Alterando a herança para private, ainda assim é possível adicionar uma função membro na classe 
   Derived que chama a função read()?

Não, elementos definidos dentro de um private não podem ser acessados por outras classes, apenas por 
metódos da class que a contém

/********************************************************************************************************/

3) É possível chamar a função read() a partir de um objeto do tipo Derived?

Não, não tem uma função que permite que essa função seja acessada

/********************************************************************************************************/

4) Modifique o código de forma que a classe Derived use herança protected. 
   Crie uma classe Derived2 que seja derivada da classe Derived utilizando herança public. 
   É possível chamar read() a partir de uma função membro da classe Derived2? E o método value()?

/*  orinigal code  */

class Base{
    
    int i;
    
    protected:
        int read() const { return i; }
        void set(int ii) { i = ii; }
    
    public:
        Base(int ii = 0) : i(ii) {}
        int value(int m) const { return m*i; }
};


class Derived : public Base{
        
        int j;
        public:
            Derived(int jj = 0) : j(jj) {}
            void change(int x) { set(x); }
};

/*  modificated code  */

class Base{
    
    int i;
    
    protected:
        int read() const { return i; }
        void set(int ii) { i = ii; }
    
    public:
        Base(int ii = 0) : i(ii) {}
        int value(int m) const { return m*i; }
        int get_read(){
            return read();
        }
};


class Derived : public Base{
        
        int j;
        public:
            Derived(int jj = 0) : j(jj) {}
            void change(int x) { set(x); }
};

class Derived2 : public Derived{
        
        int j;
        public:
            Derived(int jj = 0) : j(jj) {}
            void change(int x) { set(x); }
};